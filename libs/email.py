import smtplib
import socket
from datetime import datetime
from email import encoders
from email.mime.base import MIMEBase
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from os import path


def prepare_email(sender_domain: str) -> list:
    """Generate the content of the email, given the domain of the sender. The email address will be dynamic - which is a combination of the identifier 'cutiescript' and the hostname of the machine the script is running on.

    Args:
        sender_domain (str): The domain name of the sender machine.

    Returns:
        list: A list containing the from address, the subject of the email and the content of the email.
    """
    today_date = datetime.now().strftime("%d-%m-%Y")
    hostname = socket.gethostname()
    subject = f"ALM Testplan export - {today_date}"
    content = f"""Hi all,

Please find attached the test plan export taken on {today_date}.

This is an automated mail. Please do not reply.
Generated by python-cutie, sent by {hostname}.
    """
    return [
        f"cutiescript-{hostname}@{sender_domain}",
        subject,
        content,
    ]


def send_email(
    from_address: str,
    to_addresses: list,
    cc_addresses: list,
    smtp_host: str,
    smtp_port: int,
    subject: str,
    content: str,
    attachment_paths,
) -> bool:
    """Helper function to send an email.

    Args:
        from_address (str): The email address of the sender.
        to_addresses (list): A list containing the recipient email addresses.
        cc_addresses (list): A list containing the email addresses who are CC'ed.
        smtp_host (str): The FQDN/IP address of the SMTP server.
        smtp_port (int): The port number of the SMTP server.
        subject (str): The subject of the email.
        content (str): The content of the email.
        attachment_paths: A list of the paths to files that are to be attached into the email. If this is a single file it can be a string.

    Returns:
        bool: Status of the operation [success/failure].
    """
    # start a message
    message = MIMEMultipart()
    # init logger

    # set addresses
    message["From"] = from_address
    message["To"] = ", ".join(to_addresses)
    if len(cc_addresses) != 0 and cc_addresses is not None:
        message["Cc"] = ", ".join(cc_addresses)
    # set the subject
    message["Subject"] = subject
    # set the content
    message.attach(MIMEText(content, "plain"))
    # attach all files that are given
    if isinstance(attachment_paths, str):
        attachment_paths = [attachment_paths]
    if isinstance(attachment_paths, list):
        for attachment_path in attachment_paths:
            with open(attachment_path, "rb") as attachment_fh:
                part = MIMEBase("application", "octet-stream")
                part.set_payload(attachment_fh.read())
            encoders.encode_base64(part)
            part.add_header(
                "Content-Disposition",
                f"attachment; filename= {path.basename(attachment_path)}",
            )
            message.attach(part)
    # render the message
    text = message.as_string()
    # send the message
    server = smtplib.SMTP(smtp_host, smtp_port)
    result = server.sendmail(from_address, to_addresses + cc_addresses, text)
    server.quit()
    return len(result) == 0
